```{r}
# 安装和加载必要的R包
install.packages(c("readr", "dplyr"))
library(readr)
library(dplyr)
```
# 1. 读取文件为一列
data <- readLines("IMPC_parameter_description.txt")

# 2. 查看前几行，确认数据格式
head(data)

# 3. 去除掉前两行（因为它们是列标题和其他不需要的内容）
data_clean <- data[-c(1, 2)]

# 4. 检查并去除任何空行
data_clean <- data_clean[data_clean != ""]

# 5. 用正则表达式分割每一行的内容
# 对于每一行，使用正则表达式将 "line_number" 与后面的字段分开
data_split <- strsplit(data_clean, '" "', perl = TRUE)

# 6. 对拆分后的数据进行进一步处理：去掉引号，并拆分逗号分隔的字段
data_split <- lapply(data_split, function(x) {
  # 移除前后的引号
  x <- gsub('"', '', x)
  # 按逗号分割字段
  strsplit(x, ",\\s*")
})
result_lapply <- lapply(data_split, function(x) {
  # 将 x 扁平化成一个向量
  unlist(x)
})
head(result_lapply)
# 确保每个字符向量都转置成一行
result_as_df <- lapply(result_lapply, function(x) {
  data.frame(t(x))  # 转置每个向量，使其变成一行
})

# 使用 bind_rows 合并，按行绑定
data_split_df <- bind_rows(result_as_df)

data_split_df <- apply(data_split_df, 2, function(x) trimws(x))  # 去除两端空格

# 9. 将数据转换为数据框并为每一列命名
final_data <- as.data.frame(data_split_df, stringsAsFactors = FALSE)

# 10. 给数据框命名
colnames(final_data) <- c("line_number", "impcParameterOrigId", "name", "description", "parameterId")

# 11. 查看结果
head(final_data)
```
```{r}
library(tools)

# 设置文件夹路径
folder_path <- "data"

# 获取文件夹中所有的 CSV 文件
csv_files <- list.files(path = "data", pattern = "*.csv", full.names = TRUE)

# final_data 假设已经存在并且包含 parameterId 和 parameter_name 列
# final_data <- read.csv("final_data.csv")  # 如果 final_data 已经在内存中，就不需要这行代码

# 设定 keywords 列表
keywords <- c("gene_accession_id", "gene_symbol", "mouse_strain", "mouse_life_stage", 
              "parameter_id", "pvalue", "parameter_name", "analysis_id")

# 用于保存异常数据的空数据框
exception_data <- data.frame(
  file_name = character(),  # 文件名
  variable_name = character(),  # 变量名
  abnormal_value = character(),  # 异常数据值
  stringsAsFactors = FALSE
)

# 遍历文件夹中的每个 CSV 文件
for (csv_file in csv_files) {
  # 读取当前 CSV 文件
  data <- read.csv(csv_file, header = FALSE)
  
  # 提取文件名（不包括路径）
  file_name_value <- basename(csv_file)
  
  # 遍历每个关键词，找到对应的 B 列值并将其赋值给对应的变量
  for (keyword in keywords) {
    # 在 A 列中查找关键词，找到对应的 B 列值
    matching_value <- data[data[, 1] == keyword, 2]
    
    # 如果找到对应的值，就将它赋值给相应的变量
    if (length(matching_value) > 0) {
      assign(keyword, matching_value)
      
      # 1. 清理 analysis_id (15 字符，字母数字)
      if (keyword == "analysis_id") {
        if (nchar(analysis_id) != 15) {
          exception_data <- rbind(exception_data, data.frame(
            file_name = file_name_value,  # 使用变量 file_name_value
            variable_name = "analysis_id",
            abnormal_value = analysis_id,
            stringsAsFactors = FALSE
          ))
          analysis_id <- NA  # 设置为 NA
        }
      }
      
      # 2. 清理 gene_accession_id (9-11 字符，字母数字)
      if (keyword == "gene_accession_id") {
        if (nchar(gene_accession_id) < 9 | nchar(gene_accession_id) > 11) {
          exception_data <- rbind(exception_data, data.frame(
            file_name = file_name_value,  # 使用变量 file_name_value
            variable_name = "gene_accession_id",
            abnormal_value = gene_accession_id,
            stringsAsFactors = FALSE
          ))
          gene_accession_id <- NA  # 设置为 NA
        }
      }
      
      # 3. 清理 gene_symbol (1-13 字符，标题格式)
      if (keyword == "gene_symbol") {
        if (nchar(gene_symbol) < 1 | nchar(gene_symbol) > 13) {
          exception_data <- rbind(exception_data, data.frame(
            file_name = file_name_value,  # 使用变量 file_name_value
            variable_name = "gene_symbol",
            abnormal_value = gene_symbol,
            stringsAsFactors = FALSE
          ))
          gene_symbol <- NA  # 设置为 NA
        } else {
          gene_symbol <- toTitleCase(gene_symbol)
        }
      }
      
      # 4. 清理 mouse_strain (3-5 字符，必须是 C57BL, B6J, C3H, 129SV)
      if (keyword == "mouse_strain") {
        valid_strains <- c("C57BL", "B6J", "C3H", "129SV")
        if (!(mouse_strain %in% valid_strains)) {
          exception_data <- rbind(exception_data, data.frame(
            file_name = file_name_value,  # 使用变量 file_name_value
            variable_name = "mouse_strain",
            abnormal_value = mouse_strain,
            stringsAsFactors = FALSE
          ))
          mouse_strain <- NA  # 设置为 NA
        }
      }
      
      # 5. 清理 mouse_life_stage (4-17 字符，必须是特定的阶段)
      if (keyword == "mouse_life_stage") {
        valid_stages <- c("E12.5", "E15.5", "E18.5", "E9.5", "Early adult", "Late adult", "Middle aged adult")
        if (!(mouse_life_stage %in% valid_stages)) {
          exception_data <- rbind(exception_data, data.frame(
            file_name = file_name_value,  # 使用变量 file_name_value
            variable_name = "mouse_life_stage",
            abnormal_value = mouse_life_stage,
            stringsAsFactors = FALSE
          ))
          mouse_life_stage <- NA  # 设置为 NA
        }
      }
      
        # 6. 清理 parameter_name (2-74 字符)
    if (keyword == "parameter_name") {
      if (nchar(parameter_name) < 2 | nchar(parameter_name) > 74) {
        exception_data <- rbind(exception_data, data.frame(
          file_name = "1.csv",
          variable_name = "parameter_name",
          abnormal_value = parameter_name,
          stringsAsFactors = FALSE
        ))
        parameter_name <- NA  # 设置为 NA
      }
    }
      
      # 7. 清理 parameter_id
      if (keyword == "parameter_id") {
        # 步骤 1: 检查 parameter_id 是否在 final_data 的 parameterId 列中
        if (!(parameter_id %in% final_data$parameterId)) {
          exception_data <- rbind(exception_data, data.frame(
            file_name = file_name_value,  # 使用变量 file_name_value
            variable_name = "parameter_id",
            abnormal_value = parameter_id,
            stringsAsFactors = FALSE
          ))
          parameter_id <- NA  # 设置为 NA
        } else {
          # 步骤 2: 如果 parameter_id 匹配，则进一步检查 name 是否一致
          matching_row <- final_data[final_data$parameterId == parameter_id, ]
          
          # 提取匹配行的 name
          if (nrow(matching_row) > 0) {
            final_parameter_name <- matching_row$name[1]
            
            # 如果 final_data 中的 name 和 csv 中的 parameter_name 不一致，记录异常
            if (final_parameter_name != parameter_name) {
              exception_data <- rbind(exception_data, data.frame(
                file_name = file_name_value,  # 使用变量 file_name_value
                variable_name = "parameter_name",
                abnormal_value = parameter_name,
                stringsAsFactors = FALSE
              ))
              parameter_name <- NA  # 设置为 NA
            }
          }
        }
      }
      
      # 8. 清理 pvalue (0 到 1 之间)
      if (keyword == "pvalue") {
        if (pvalue < 0 | pvalue > 1) {
          exception_data <- rbind(exception_data, data.frame(
            file_name = file_name_value,  # 使用变量 file_name_value
            variable_name = "pvalue",
            abnormal_value = pvalue,
            stringsAsFactors = FALSE
          ))
          pvalue <- NA  # 设置为 NA
        }
      }
    }
  }
}

# 保存异常数据到 CSV 文件
write.csv(exception_data, "exception_data.csv", row.names = FALSE)

# 打印异常数据（可选）
print(exception_data) 

```
```{r}
library(dplyr)

# 获取 data/10 文件夹中的所有 CSV 文件
csv_files <- list.files(path = "data/10", pattern = "*.csv", full.names = TRUE)

# 创建一个空的数据框来存储所有提取的数据
combined_data <- data.frame()

# 定义要查找的关键词（对应 A 列）
keywords <- c("gene_accession_id", "gene_symbol", "mouse_strain", "mouse_life_stage", 
              "parameter_id", "pvalue", "parameter_name", "analysis_id")

# 用于遍历每个 CSV 文件并提取数据
for (file in csv_files) {
  
  # 读取 CSV 文件
  sheet_data <- read.csv(file, header = FALSE)  # 确保没有列名，因为数据是固定行的
  
  # 创建一个空的数据框来存储当前文件提取的数据
  extracted_data <- data.frame(matrix(NA, ncol = length(keywords), nrow = 1))
  colnames(extracted_data) <- keywords  # 设置列名为关键词

  # 遍历每个关键词，在 A 列查找对应的 B 列值
  for (keyword in keywords) {
    
    # 查找关键词所在的行
    matching_row <- which(grepl(keyword, sheet_data$V1, ignore.case = TRUE))  # V1 是 A 列
    
    # 如果找到了匹配的行，提取对应的 B 列值
    if (length(matching_row) > 0) {
      b_value <- sheet_data[matching_row, 2]  # 提取对应的 B 列数据
      extracted_data[[keyword]] <- b_value  # 将 B 列的值放入相应的列
    } else {
      # 如果没有找到该行的值，可以选择不做任何处理，或者可以设置为空字符串（""）
      extracted_data[[keyword]] <- ""  # 设置为空字符串而不是 NA
    }
  }

  # 将当前文件提取的数据添加到总的数据框中
  combined_data <- bind_rows(combined_data, extracted_data)
}

# 为数据框添加序号列
combined_data$Index <- 1:nrow(combined_data)


# 写入合并后的数据到 CSV 文件
write.csv(combined_data, "combined_data.csv", row.names = FALSE)


```
